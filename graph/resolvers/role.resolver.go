package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"chatney-backend/graph"
	"chatney-backend/graph/model"
	"chatney-backend/src/application"
	"chatney-backend/src/domains/role/models"
	"context"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, roleData model.CreateRoleDto) (*model.Role, error) {
	permissions := make([]models.PermissionKey, len(roleData.Permissions))
	for i, p := range roleData.Permissions {
		permissions[i] = models.PermissionKey(p) // converting string into PermissionKey type
	}

	role, err := application.RoleRootAggregate.CreateNewRole(models.Role{
		Name: roleData.Name,
		Settings: models.RoleSettings{
			Base: roleData.Settings.Base,
		},
		Permissions: permissions,
	})

	permissionsOut := make([]string, len(role.Permissions))
	for i, p := range role.Permissions {
		permissionsOut[i] = string(p) // converting string into PermissionKey type
	}

	return &model.Role{
		ID:          role.Id.String(),
		Name:        role.Name,
		Permissions: permissionsOut,
		Settings:    (*model.RoleSettings)(&role.Settings),
	}, err
}

// EditRole is the resolver for the editRole field.
func (r *mutationResolver) EditRole(ctx context.Context, roleData model.EditRoleDto) (*model.Role, error) {
	permissions := make([]models.PermissionKey, len(roleData.Permissions))
	for i, p := range roleData.Permissions {
		permissions[i] = models.PermissionKey(p) // converting string into PermissionKey type
	}

	role, err := application.RoleRootAggregate.CreateNewRole(models.Role{
		Name: roleData.Name,
		Settings: models.RoleSettings{
			Base: roleData.Settings.Base,
		},
		Permissions: permissions,
	})

	permissionsOut := make([]string, len(role.Permissions))
	for i, p := range role.Permissions {
		permissionsOut[i] = string(p) // converting string into PermissionKey type
	}

	return &model.Role{
		ID:          role.Id.String(),
		Name:        role.Name,
		Permissions: permissionsOut,
		Settings:    (*model.RoleSettings)(&role.Settings),
	}, err
}

// Mutation returns graph.MutationResolver implementation.
func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
