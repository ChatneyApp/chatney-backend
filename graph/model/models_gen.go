// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql_models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type Channel struct {
	ID            string    `json:"Id"`
	Name          string    `json:"Name"`
	ChannelTypeID string    `json:"ChannelTypeId"`
	WorkspaceID   string    `json:"WorkspaceId"`
	CreatedAt     time.Time `json:"CreatedAt"`
	UpdatedAt     time.Time `json:"UpdatedAt"`
}

type ChannelGroup struct {
	ID        string    `json:"Id"`
	Name      string    `json:"Name"`
	Channels  []string  `json:"Channels"`
	Order     int32     `json:"Order"`
	Workspace string    `json:"Workspace"`
	CreatedAt time.Time `json:"CreatedAt"`
	UpdatedAt time.Time `json:"UpdatedAt"`
}

type ChannelRole struct {
	ChannelID string `json:"ChannelId"`
	RoleID    string `json:"RoleId"`
}

type ChannelSettings struct {
	ChannelID       string `json:"ChannelId"`
	LastSeenMessage string `json:"LastSeenMessage"`
	Muted           bool   `json:"Muted"`
}

type ChannelType struct {
	ID         string    `json:"Id"`
	Label      string    `json:"Label"`
	Key        string    `json:"Key"`
	BaseRoleID string    `json:"BaseRoleId"`
	CreatedAt  time.Time `json:"CreatedAt"`
	UpdatedAt  time.Time `json:"UpdatedAt"`
}

type ChannelTypeRole struct {
	ChannelTypeID string `json:"ChannelTypeId"`
	RoleID        string `json:"RoleId"`
}

type CreateChannelGroupInput struct {
	Name      string   `json:"Name"`
	Channels  []string `json:"Channels"`
	Order     int32    `json:"Order"`
	Workspace string   `json:"Workspace"`
}

type CreateRoleDto struct {
	Name        string           `json:"Name"`
	Permissions []string         `json:"Permissions"`
	Settings    *RoleSettingsDto `json:"Settings"`
}

type CreateUserDto struct {
	Password   string     `json:"Password"`
	Name       string     `json:"Name"`
	Status     UserStatus `json:"Status"`
	Email      string     `json:"Email"`
	Workspaces []string   `json:"Workspaces,omitempty"`
}

type EditRoleDto struct {
	ID          string           `json:"Id"`
	Name        string           `json:"Name"`
	Permissions []string         `json:"Permissions,omitempty"`
	Settings    *RoleSettingsDto `json:"Settings"`
}

type Message struct {
	ID          string      `json:"Id"`
	ChannelID   string      `json:"ChannelId"`
	UserID      string      `json:"UserId"`
	Content     string      `json:"Content"`
	Attachments []string    `json:"Attachments,omitempty"`
	Status      string      `json:"Status"`
	CreatedAt   time.Time   `json:"CreatedAt"`
	UpdatedAt   time.Time   `json:"UpdatedAt"`
	Reactions   []*Reaction `json:"Reactions,omitempty"`
}

type MutateChannelDto struct {
	Name          string `json:"Name"`
	ChannelTypeID string `json:"ChannelTypeId"`
	WorkspaceID   string `json:"WorkspaceId"`
}

type MutateChannelTypeDto struct {
	Label      string `json:"Label"`
	Key        string `json:"Key"`
	BaseRoleID string `json:"BaseRoleId"`
}

type MutateMessageDto struct {
	ChannelID   string         `json:"ChannelId"`
	UserID      string         `json:"UserId"`
	Content     *string        `json:"Content,omitempty"`
	Attachments []string       `json:"Attachments,omitempty"`
	Status      string         `json:"Status"`
	Reactions   []*ReactionDto `json:"Reactions,omitempty"`
}

type MutateWorkspaceDto struct {
	Name string `json:"Name"`
}

type Mutation struct {
}

type PermissionsGroup struct {
	Label string   `json:"label"`
	List  []string `json:"list"`
}

type PermissionsListReturn struct {
	Groups []*PermissionsGroup `json:"groups"`
}

type Query struct {
}

type Reaction struct {
	UserID   string `json:"UserId"`
	Reaction string `json:"Reaction"`
}

type ReactionDto struct {
	UserID   string `json:"UserId"`
	Reaction string `json:"Reaction"`
}

type Role struct {
	ID          string        `json:"Id"`
	Name        string        `json:"Name"`
	Permissions []string      `json:"Permissions,omitempty"`
	Settings    *RoleSettings `json:"Settings"`
	CreatedAt   time.Time     `json:"CreatedAt"`
	UpdatedAt   time.Time     `json:"UpdatedAt"`
}

type RoleSettings struct {
	Base bool `json:"Base"`
}

type RoleSettingsDto struct {
	Base bool `json:"Base"`
}

type SystemConfigValue struct {
	Name      string    `json:"Name"`
	Value     string    `json:"Value"`
	Type      string    `json:"Type"`
	CreatedAt time.Time `json:"CreatedAt"`
	UpdatedAt time.Time `json:"UpdatedAt"`
}

type UpdateChannelGroupInput struct {
	ID       string   `json:"Id"`
	Name     *string  `json:"Name,omitempty"`
	Channels []string `json:"Channels,omitempty"`
	Order    *int32   `json:"Order,omitempty"`
}

type UpdateUserAdminDto struct {
	Name       string     `json:"Name"`
	Status     UserStatus `json:"Status"`
	Email      string     `json:"Email"`
	Workspaces []string   `json:"Workspaces,omitempty"`
}

type UpdateUserDto struct {
	Name  string `json:"Name"`
	Email string `json:"Email"`
}

type User struct {
	ID               string             `json:"Id"`
	Name             string             `json:"Name"`
	Status           UserStatus         `json:"Status"`
	Email            string             `json:"Email"`
	Roles            *UserRolesSettings `json:"Roles"`
	ChannelsSettings []*ChannelSettings `json:"ChannelsSettings,omitempty"`
	Workspaces       []string           `json:"Workspaces,omitempty"`
	CreatedAt        time.Time          `json:"CreatedAt"`
	UpdatedAt        time.Time          `json:"UpdatedAt"`
}

type UserAuthData struct {
	Token string `json:"Token"`
	ID    string `json:"Id"`
}

type UserRolesSettings struct {
	Global       *string            `json:"Global,omitempty"`
	Workspace    []*WorkspaceRole   `json:"Workspace,omitempty"`
	Channel      []*ChannelRole     `json:"Channel,omitempty"`
	ChannelTypes []*ChannelTypeRole `json:"ChannelTypes,omitempty"`
}

type Workspace struct {
	ID        string    `json:"Id"`
	Name      string    `json:"Name"`
	CreatedAt time.Time `json:"CreatedAt"`
	UpdatedAt time.Time `json:"UpdatedAt"`
}

type WorkspaceRole struct {
	WorkspaceID string `json:"WorkspaceId"`
	RoleID      string `json:"RoleId"`
}

type UserStatus string

const (
	UserStatusActive   UserStatus = "ACTIVE"
	UserStatusInactive UserStatus = "INACTIVE"
	UserStatusBanned   UserStatus = "BANNED"
	UserStatusMuted    UserStatus = "MUTED"
)

var AllUserStatus = []UserStatus{
	UserStatusActive,
	UserStatusInactive,
	UserStatusBanned,
	UserStatusMuted,
}

func (e UserStatus) IsValid() bool {
	switch e {
	case UserStatusActive, UserStatusInactive, UserStatusBanned, UserStatusMuted:
		return true
	}
	return false
}

func (e UserStatus) String() string {
	return string(e)
}

func (e *UserStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = UserStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid UserStatus", str)
	}
	return nil
}

func (e UserStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
