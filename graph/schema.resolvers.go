package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.66

import (
	"chatney-backend/graph/model"
	"chatney-backend/src/domains/permissions"
	"context"
	"fmt"
)

// CreateRole is the resolver for the createRole field.
func (r *mutationResolver) CreateRole(ctx context.Context, roleData model.CreateRoleDto) (*model.Role, error) {
	panic(fmt.Errorf("not implemented: CreateRole - createRole"))
}

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	panic(fmt.Errorf("not implemented: Todos - todos"))
}

// GetPermissionsList is the resolver for the getPermissionsList field.
func (r *queryResolver) GetPermissionsList(ctx context.Context) (*model.PermissionsListReturn, error) {
	permissionsGroups, err := permissions.PermissionsGroups.GetPermissionsList()

	if err != nil {
		return nil, err
	}

	return &model.PermissionsListReturn{
		Groups: []*model.PermissionsGroup{permissionsGroups},
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
