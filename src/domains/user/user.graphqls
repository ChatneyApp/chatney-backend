enum UserStatus {
  ACTIVE
  INACTIVE
  BANNED
  MUTED
}
type UserRolesSettings {
  Global: String
  Workspace: [WorkspaceRole!]
  Channel: [ChannelRole!]
  ChannelTypes: [ChannelTypeRole!]
}

type WorkspaceRole {
  WorkspaceId: String!
  RoleId: String!
}

type ChannelRole {
  ChannelId: String!
  RoleId: String!
}

type ChannelTypeRole {
  ChannelTypeId: String!
  RoleId: String!
}

type ChannelSettings {
  ChannelId: String!
  LastSeenMessage: String!
  Muted: Boolean!
}

type UserAuthData {
  Token: String!
  Id: String!
}

type User {
  Id: String!
  Name: String!
  Status: UserStatus!
  Email: String!
  Roles: UserRolesSettings!
  ChannelsSettings: [ChannelSettings!]
  Workspaces: [String!]
  CreatedAt: Time!
  UpdatedAt: Time!
}

input UpdateUserDTO {
  Name: String!
  Email: String!
}

input UpdateUserAdminDTO {
  Name: String!
  Status: UserStatus!
  Email: String!
  Workspaces: [String!]
}

input CreateUserDTO {
  Password: String!
  Name: String!
  Status: UserStatus!
  Email: String!
  Workspaces: [String!]
}

extend type Mutation {
  createUser(input: CreateUserDTO!): User
  deleteUser(userId: String!): Boolean!
  updateUser(input: UpdateUserDTO!, userId: String!): User
  updateUserAdmin(input: UpdateUserAdminDTO!, userId: String!): User
}

extend type Query {
  GetUser(ID: String!): User
  AuthorizeUser(login: String!, password: String!): UserAuthData!
}
